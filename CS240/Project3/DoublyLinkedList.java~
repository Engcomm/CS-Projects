public class DoublyLinkedList<T extends Comparable<? super T>>
{
    private int size;
    private Node firstNode;
    private Node lastNode;
    
    public DoublyLinkedList()
    {
	firstNode = null;
	lastNode = null;
	size = 0;
    }

    public boolean add(T anEntry)
    {
	Node newNode = new Node(anEntry);
	newNode.next = firstNode;
	if(firstNode != null)
	    firstNode.prev = newNode;
	newNode.prev = null;
	firstNode = newNode;
	if(lastNode != null)
	    lastNode = lastNode.next;
	else
	    lastNode = firstNode;
	size++;	
   	return true;
    }

    public void insertionSort()
    {	
	assert firstNode != null;
	T nextToInsert;
	Node currentNode;
	if(firstNode.next != null)
	    currentNode = firstNode.next;
	else
	    currentNode = null;	
	while(currentNode != null)
        {
	    nextToInsert = currentNode.data;
	    insertInOrder(currentNode.prev, nextToInsert);
	    currentNode = currentNode.next;	    
	}		
    }

    public void insertInOrder(Node end, T nextToInsert)
    {	  
	Node currentNode = end;
	while((currentNode != null) && (currentNode.data).compareTo(nextToInsert) == 1)		  
	    currentNode = currentNode.prev;	    		
	if(currentNode == null)
	{
	    firstNode.next.data = firstNode.data;
	    firstNode.data = nextToInsert;
	}       
	else
	    currentNode.next.data = nextToInsert;	       
    }       
    
    public void printOut()
    {
	Node currentNode = firstNode;
	while(currentNode != null)
	{
	    System.out.println(currentNode.data);
	    currentNode = currentNode.next;
	}
    }


    private class Node
    { 
	private T data;
	private Node next;
	private Node prev;
	
	private Node(T dataPortion)
	{
	    this(dataPortion, null, null);
	}

	private Node(T dataPortion, Node nextNode, Node prevNode)
	{
	    data = dataPortion;
	    next = nextNode;
	    prev = prevNode;
	}
    }

}