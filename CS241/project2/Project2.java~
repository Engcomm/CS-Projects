import java.util.*;

public class Project2 
{
    public static void main(String[] args) 
    {
	Scanner kb = new Scanner(System.in);
	int userChoice = 3;
	do
	{
	    System.out.println("====================================================================");
	    System.out.println("Please select how to test the program:");
	    System.out.println("(1) 20 sets of 100 randomly generated integers");
	    System.out.println("(2) Fixed integer values 1-100");
	    System.out.println("(3) Quit");
	    System.out.print("Enter choice: ");
	    userChoice = kb.nextInt();
	    if(userChoice == 1)
		randomInt();
	    else if(userChoice == 2)
		fixedInt();
	} while(userChoice != 3);
    }
    
    public static void randomInt()
    {
	int insertionSwap = 0;
	int optimalSwap = 0;
	int j = 1;
	boolean duplicated = false;
	Random ran = new Random();
	Integer[] entries = new Integer[101];
	for(int i = 0; i < 20; i++)
	{	    
	    while(j < entries.length)
	    {
		entries[j] = ran.nextInt(100) + 1;
		for(int m = 1; m < j; m++)
		{
		    if(entries[m] == entries[j])
		    {
			duplicated = true;
			break;
		    }
		    else
			duplicated = false;
		}
		if(duplicated)
		    continue;
		else
		    j++;	
	    }	 			    	 
	    insertionSwap += insertion(entries, false);
	    optimalSwap += optimal(entries, false);
	}		
	System.out.println("Average swaps for series of insertions: " + insertionSwap / 20);
	System.out.println("Average swaps for optimal method: " + optimalSwap / 20);
		
    }
    
    public static void fixedInt()
    {
	int insertionSwap = 0;
	int optimalSwap = 0;
	Integer[] entries = new Integer[101];
	for(int i = 1; i <= 100; i++)
	    entries[i] = i;
	insertionSwap += insertion(entries, true);
	System.out.println("Number of swaps: " + insertionSwap);
	System.out.println();
	optimalSwap += optimal(entries, true);
	System.out.println("Number of swaps: " + optimalSwap);
	System.out.println();
    }
    
    public static int insertion(Integer[] entries, boolean fixed)
    {
	ArrayHeap<Integer> heap = new ArrayHeap<Integer>();
	for(int i = 1; i < entries.length; i++)
	    heap.add(entries[i]);
	if(fixed)
	{
	    Comparable[] heapArray = heap.getHeap();
	    System.out.print("Heap built using series of insertions: ");
	    for(int i = 1; i <= 10; i++)
		System.out.print(heapArray[i] + ",");
	    System.out.println("...");
	    heapArray = remove(heap);
	    System.out.print("Heap after 10 removals: ");
	    for(int i = 1; i <= 10; i++)
		System.out.print(heapArray[i] + ",");
	    System.out.println("...");
	}
	return heap.getInsertionSwap();
    }
    
    public static int optimal(Integer[] entries, boolean fixed)
    {
	int reheapSwap = 0;
	ArrayHeap<Integer> heap = new ArrayHeap<Integer>(entries);
	reheapSwap = heap.getReheapSwap();
	if(fixed)
	{
	    Comparable[] heapArray = heap.getHeap();
	    System.out.print("Heap built using optimal method: ");
	    for(int i = 1; i <= 10; i++)
		System.out.print(heapArray[i] + ",");
	    System.out.println("...");
	    heapArray = remove(heap);
	    System.out.print("Heap after 10 removals: ");
	    for(int i = 1; i <= 10; i++)
		System.out.print(heapArray[i] + ",");
	    System.out.println("...");
	}
	return reheapSwap;
    }

    public static Comparable[] remove(ArrayHeap<Integer> heap)
    {
	Integer root = 0;
	for(int i = 0; i < 10; i++)
	    root = heap.removeRoot();
	return heap.getHeap();
    }
}
